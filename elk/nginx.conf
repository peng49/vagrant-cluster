
#user  nobody;
worker_processes  1;
events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  text/html;
    log_format body escape=json  '{'
            '"timestamp": "$time_local",'
            '"http_host": "$host",'
            '"http_uri": "$uri",'
            '"http_status": "$status",'
            '"request": "$request",'
            '"request_method": "$request_method",'
            '"request_query": "$request_query",'
            '"request_header": "$request_header",'
            '"request_body": "$request_body",'
            '"response_header": "$response_header",'
            '"response_body": "$response_body"'
    '}' ;

    sendfile        on;

    #tcp_nopush     on;
    #keepalive_timeout  0;
    keepalive_timeout  65;
    #gzip  on;
    server {
        listen       80;
        server_name  localhost;
        #charset utf-8;
        # 记录请求body
        # lua_need_request_body  on;
        access_log  /usr/local/openresty/nginx/logs/access.log body;
        # 记录请求header和返回header
        set $request_header "";
        set $response_header "";
        set $request_query "";
        header_filter_by_lua_block  {
            json = require "cjson"
            ngx.var.request_query = json.encode(ngx.req.get_uri_args())
            ngx.var.request_header = json.encode(ngx.req.get_headers())
            ngx.var.response_header = json.encode(ngx.resp.get_headers())
        }
        # 记录返回body
        set $response_body  "";
        body_filter_by_lua_block  {
            local response_body = string.sub(ngx.arg[1],1,100000)
            ngx.ctx.buffered =  (ngx.ctx.buffered or "")   .. response_body
            if ngx.arg[2] then
                ngx.var.response_body = ngx.ctx.buffered
            end
        }
        location / {
            root   html;
            index  index.html index.htm;
        }
        location /api {
            default_type  application/json;
            proxy_pass http://localhost:8001;
        }
        # lua 返回指定内容
        location /lua {
            content_by_lua '
                function read_from_file(file_name)
                    local f = assert(io.open(file_name, "r"))
                    local string = f:read("*all")
                    f:close()
                    return string
                end
                ngx.req.read_body()
                local body_str = ngx.req.get_body_data()
                if nil == body_str then
                    local body_file = ngx.req.get_body_file()
                    if body_file then
                        body_str = read_from_file(body_file)
                    end
                end
                ngx.say(body_str)
            ';
        }
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
    server {
        listen 8001;
        server_name location;
        access_log off;
        return 200 '{"code":200,"info":"Successful 8001"}';
    }
}
